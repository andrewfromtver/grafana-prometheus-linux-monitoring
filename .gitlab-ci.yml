stages:
  - test
  - deploy

test-code-job:
  stage: test
  tags:
    - test
    - docker
  script:
    - semgrep scan --config auto --output $CI_PROJECT_NAME-sast-report.json --json
  artifacts:
    paths:
      - $CI_PROJECT_NAME-sast-report.json
    expire_in: 4 week
    name: ${CI_PROJECT_NAME}_${CI_JOB_ID}_sast_report
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        curl "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=%20‚úÖ%20%5B$CI_PROJECT_NAME%5D%20All%20tests%20passed%20successfuly"
        curl -F document=@"$CI_PROJECT_NAME-sast-report.json" https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument?chat_id=$TELEGRAM_CHAT_ID
      else
        curl "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=%20‚ùå%20%5B$CI_PROJECT_NAME%5D%20Tests%20failed%20$CI_PIPELINE_URL"
      fi

deploy-code-job:
  stage: deploy
  tags:
    - host
  script:
    - touch .env
    - echo "GF_SECURITY_ADMIN_USER=$GF_SECURITY_ADMIN_USER" >> .env
    - echo "GF_SECURITY_ADMIN_PASSWORD=$GF_SECURITY_ADMIN_PASSWORD" >> .env
    - docker compose -p $CI_PROJECT_NAME down
    - docker compose -p $CI_PROJECT_NAME up -d --wait grafana
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        curl "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=%20üöÄ%20%5B$CI_PROJECT_NAME%5D%20Deploy%20job%20completed%20$PROJECT_URL"
      else
        curl "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage?chat_id=$TELEGRAM_CHAT_ID&text=%20‚ùå%20%5B$CI_PROJECT_NAME%5D%20Deploy%20job%20failed%20$CI_PIPELINE_URL"
      fi
